#include "pinline.h"
#include "parser.h"
#include "pcommon.h"
#include "output.h"
#include "oops.h"

#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include "error.h"


/* This module handles inline bitmaps/icons/cursors. Inline resources are not
 * standard, but they are generated by Resource Workshop which happens to be
 * my favorite windows resource editor, so this program must support this
 * extension.
 */

/* Input:
   <eol>
   BEGIN
     'xx xx xx xx xx'
     ...
   END

   output:
   filename.ext <eol> and the data dumped in that file
 */
static void buildFilename(char *buf, const char *resname, const char *ext) {
	if(strlen(resname)<=8) {
		strcpy(buf,resname);
	} else {
		//remove vowels
		char *d=buf;
		const char *s=resname;
		while(*s) {
			switch(*s) {
				case 'a':
				case 'e':
				case 'i':
				case 'o':
				case 'u':
				case 'y':
				case 'A':
				case 'E':
				case 'I':
				case 'O':
				case 'U':
				case 'Y':
					break;
				default:
					*d++=*s;
			}
			s++;
		}
		*d='\0';
	}
	strcat(buf,ext);
}


void doInlineString(FILE *fp);

void doInlineStuff(const char *resname, const char *ext, const char *fext) {
	char filename[255];
	buildFilename(filename,resname,ext);

	output(' ');
	output(filename);
	doEOL();

	disableOutput();
	doBEGIN();
	doEOL();

	buildFilename(filename,resname,fext);

	displayWarning("Inline bitmap/icon/cursor found. Dumping to:");
	displayWarning(filename);

	FILE *fp=fopen(filename,"wb");
	if(!fp) {
		ShowError(EX_CANTCREAT,"could not create '%s'\n",filename);
	}

	while(tc!=tc_literal || !isEND()) {
		doInlineString(fp);
		doEOL();
	}

	fclose(fp);

	doEND();
	doEOL();
	enableOutput();
}

void doInlineString(FILE *fp) {
	if(tc==tc_eol) return;

	if(tc!=tc_unknown || buf[0]!='\'')
		doUnexpected("string start");

	getNext();
	while(tc!=tc_unknown || buf[0]!='\'') {
		char *endptr;
		char v=(char)strtol(buf,&endptr,16);
		if(*endptr) {
			doUnexpected("hexadecimal number");
		}
		if(fwrite(&v,1,1,fp)!=1) {
			ShowError(EX_IOERR,"Could not write\n");
		}
		getNext();
	}

	getNext();
}
