#include <process.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <sys/stat.h>

#include "mbihc.h"

static char BaseIPFFilename[128];

void startMultiHelp(const char *projectfilename) {
        //calculate .HPJ filename
        char drive[_MAX_DRIVE],dir[_MAX_DIR],fname[_MAX_FNAME],ext[_MAX_EXT];
        _splitpath(projectfilename,drive,dir,fname,ext);
        _makepath(BaseIPFFilename,drive,dir,fname,".ipf");
}

static int isFileUptodate(const char *inname, const char *outname) {
        struct stat statBIH,statRTF;
        if(stat(inname,&statBIH)!=0) return 0;
        if(stat(outname,&statRTF)!=0) return 0;
        if(statRTF.st_mtime<statBIH.st_mtime) return 0;
        return 1;
}

static char IPFFilenameBuffer[2048]="";

void buildMultiHelp(int baselevel, const char *inname) {
        char outname[128];
        
        char drive[_MAX_DRIVE],dir[_MAX_DIR],fname[_MAX_FNAME],ext[_MAX_EXT];
        _splitpath(inname,drive,dir,fname,ext);
        _makepath(outname,drive,dir,fname,".ipf");

        //see if we need to compile the file
        if(!isFileUptodate(inname,outname)) {
                printf("Compiling %s -> %s\n",inname,outname);
                //Build arguments for BIHC
                char arg0[20];
                char arg1[128];
                char arg2[128];
                char arg3[20];
                char arg4[6];
                char arg5[20];
        
                strcpy(arg0,"bihc");
        
                strcpy(arg1,inname);
        
                strcpy(arg2,outname);
                
                strcpy(arg3,autoIndex?"/ai":"/nai");
        
                itoa(baselevel,arg4,10);
        
                strcpy(arg5,"/multi");
                
                int rc;
                rc = spawnlp(P_WAIT, "bihc", arg0,arg1,arg2,arg3,arg4,arg5,(char*)0);
                if(rc!=0) {
                        fprintf(stderr,"mbihc: Error executing bihc\n");
                        if(rc==-1) perror("mbihc");
                        exit(11);
                }
        } else
                printf("%s is up-to-date\n",outname);
        
                
        {
                //concatenate IPF filename to list of IPF files
                strcat(IPFFilenameBuffer,outname);
                strcat(IPFFilenameBuffer,"\n");
        }
}

void endMultiHelp() {
        //add rtf files to HPJ file
        FILE *fp=fopen(BaseIPFFilename,"w");
        if(!fp) {
                fprintf(stderr, "mbihc: Could not re-open '%s'\n",BaseIPFFilename);
                perror("mbihc");
                exit(10);
        }

        fprintf(fp, ".* generated by MBIHC (compiled %s %s\n",__DATE__,__TIME__);
        fprintf(fp, ":userdoc.\n");
        fprintf(fp, ":title. insert your title here\n");
        fprintf(fp, ":docprof toc=123456.\n");
        fprintf(fp, "\n");

        char *p=strtok(IPFFilenameBuffer,"\n");
        while(p && *p) {
                fprintf(fp, ".im %s\n",p);
                p=strtok(0,"\n");
        }

        fprintf(fp, ":euserdoc.\n");

        fclose(fp);
}


