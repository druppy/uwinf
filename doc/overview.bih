[topic subsystem_overview same "Subsystem overview"]
The BIF system consists of 3 subsystems:
[dl "Subsystem" "Description" 13]
[dt][ref bifthread_overview "BIF/Thread"]
[dd]This subsystem implements classes to support multitasking. It offers
threads and semaphores which encapsulates the native OS-specific multitasking
API (if any).
[dt][ref bifwindow_overview "BIF/Window"]
[dd]BIF/Window encapsulates the native GUI system. It takes care of all the
boring details of Windows and PM programming and at the same time offers a
portable model so most of the user interface related parts of your programs
don't have to be changed if you switch from Windows to PM (or reverse).
[dt][ref bifmix_overview "BIF/Mix"]
[dd]BIF/Mix is the "glue" between BIF/Thread and BIF/Window. It builds upon the
two previous subsystems. Note: there are some limitations when using it under
Windows 3.x
[dt]WMS
[dd]WMS is an abbreversion of "Window Management System". It is the
"native" windowing system for textmode applictions. It is portable
between OS/2, DOS, DOS/4G and Windows NT. It uses BIF/Thread since it
uses multithreading.
[edl]

The overviews are not meant as an introduction and does not go into details of
how to use them.

See also: [ref bifthread_overview "BIF/Thread overview"],
[ref bifwindow_overview "BIF/Window overview"],
[ref bifmix_overview "BIF/Mix overview"]
[ref wms_overview "WMS overview"]
[etopic]



[topic bifthread_overview down "BIF/Thread" "BIF/Thread overview" primary]
There exists several approaches to multitasking. BIF/Thread uses the thread and
semaphore concepts mainly because that is what the currently supported 
platforms offers.

[dl]
[dt][hp 2]Threads[ehp]
[dd]A thread is a thread of execution. It has its own stack, registers and
instruction pointer. Threads are sometimes called "lightweight processes". A 
traditional program has only one thread. A program which uses multitasking 
can contain several threads.
[graphic bitmap "single- vs. multithreaded programs" "winbmp:sm-proce"]
BIF/Thread offers several thread classes depending on wether they will create
windows or not, and wether they are the main thread or not.
[dt][hp 2]Semaphores[ehp]
[dd]A semaphore is an object threads can wait for. Semaphores manages the necessarry
synchronization between threads.

The semaphores offered by BIF/Thread comes in three flavours:
[dl]
[dt][ref FSemaphore "General semaphore"]
[dd]This is the semaphore type originally proposed by E. W. Dijkstra.
[dt][ref FMutexSemaphore "Mutex semaphore"]
[dd]This is a binary version of the general semaphore but the type that is most often used.
[dt][ref FEventSemaphore "Event semaphore"]
[dd]This semaphore type is usually used for telling other threads that something
has happened.
[edl]
[edl]

For a better explanations of threads and semaphores see:
[ul]
[li]"Priciples of Concurrent Programming" by M. Ben-Ari,
Prentice-Hall, ISBN 0-13-701078-8
(excellent book - Ivan)
[li]"Modern Operating Systems" by Andrew S. Tanenbaum,
Prentice-Hall, ISBN 0-13-595752-4
[li]"Control Program Guide and Reference" in the OS/2 toolkit
[li]"Win32 API Programmer's Reference", topic "Functions and overviews" |
"Processes and threads", click on the "Overview" button
[eul]
[etopic]


[topic bifwindow_overview same "BIF/Window" "BIF/Window overview"]
[key "Overviews"]
BIF/Window implements four types of classes:
[dl "" "" 15]
[dt]Windows
[dd]BIF/Window encapsulates the GUI by means of windows. It implements classes
for most of 'native' window classes (buttons, static text, listboxes, frame
windows, ...). It allows windows to intercept messages though the handler
mechanism.
[dt]Resources
[dd]BIF/Window also encapsulates the common resource types (icons, strings,
bitmaps, ...)  and offers almost-automatic loading of them. A module class is
also implemented from which the resources can be loaded.
[dt]Application
[dd]BIF/Window takes care of the standard message-loop (Windows: including
accelerators keyboard support).
[dt]Handlers
[dd]Tiny classes which translates portable requests and events to and from
the native GUI system.
[edl]
[etopic]


[topic bifmix_overview same "BIF/Mix" "BIF/Mix overview"]
Some things has to be done a bit different when both windows and
multitasking are used. BIF/Mix implements three support classes: an application
type that allows multitasking with BIF/Thread, a thread class that allows use of
BIF/Window, and a main thread class that allows use of BIF/Window.
[etopic]

[topic wms_overview upafter "WMS" "WMS overview"]
WMS implement a full windowing system including message queues,
clipping regions, character mode output, mouse and keyboard interface. The model
and abstractions are based on the OS/2 PM API but it is not identical. The WMS
subsystem is not documented. If you need documentation for WMS you will have to
study the sources and the "OS/2 Presentation Manager Guide"
[etopic]
