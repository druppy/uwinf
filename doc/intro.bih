[topic intro same "Introduction and background"]
This section contains a small introduction to BIF.
[sl]
[li][ref story "Short story"]
[li][ref designgoals "Design goals"]
[li][ref biffuture "Future"]
[li][ref bifauthors "The authors"]
[esl]
[etopic]


[topic story down "Short story"]
It all started in spring '94 when we decided to make a cross-platform GUI and
multitasking library.  We did not like the existing GUI libraries because they
were either inconsistent, not portable, compiler dependent or simply too big.

The design of the BIF/Thread subsystem was finished late in spring '94 and the
OS/2 version of it were running soon after.  The DOS and Windows 3.x version
was a bit more complicated.  The design remained the same but the
implementation was changed a bit until this release due to some gotcha's.

The design of the BIF/Window subsystem was started in summer '94.  We looked at
other GUI libraries for getting an idea how to avoid a fat interface in the
FWnd class.  We found the handler mechanism in UICL and loved it.  Most of
the subsystem was made in the autumn by Ivan because he needed it for his 5th
semester project in his education.

In the spring '96 the WMS (sub-)system was developed because one of
the developers needed a text interface for programming gateways
and because some of the other developers thought it would be fun.
[etopic]


[topic designgoals same "Design goals"]
When we started designing BIF we set a few design goals. They were made from
common sense and what we didn't like in other libraries.

Goals:
[dl]
[dt]Subsystems
[dd]We didn't like libraries where everything is connected to and dependent on
all other parts of the library. One subsystem must be able to run without the
other subsystems. If the programmer needs more than one of the subsystems he
must be able to do that, eventually using some "glue."
[dt]"Correct" class hierachies
[dd]The class hierachies should be correct not smart. We focused on
well-defined classes rather than reuse or how something else is made. As an 
example radiobuttons, checkboxes and pushbuttons could have had a common
"button" class, but from our point of view it is not obvious that they have 
common functionality, so they haven't got a common "button" super class.
[dt]No fat interfaces
[dd]We don't like fat interfaces especially not in the base classes. We have
tried to keep the interface to a minimum. As a deterrent we can mention that
Borland's OWL2 "TWindow" class has 318 functions and that Microsoft's MFC 2.1
"CWnd" has 260 functions.
[dt]Small
[dd]Each subsystem should be as small as possible but yet usable.
[dt]Maximum flexibility
[dd]The library should be designed so it can be used in ways even we can't
think of (and we are quite creative)
[dt]Compiler independent
[dd]We wanted to support as many compilers as possible, so people don't have to
do anything special when they switch compiler.
[dt]90% Portable
[dd]The library should enable programmers to in theory write 100% portable
programs, and in real life write 90-99% portable programs.
[dt]Possible to make nonportable things
[dd]The library should not be a straight jacket limiting the programmer, but
rather a toolbox offering him the possibility to make portable programs.
[edl]

With WMS we had to make an exception. The WMS subsystem uses
BIF/Thread because it has multithreading built in and it would be
silly to use the native threading API when BIF/Thread was available.
[etopic]


[topic biffuture same "Future development of BIF"]
This is the planned development of BIF:
[dl]
[dt]Thread selection optimization.
[dd]The current algorithm in win16 for selecting the next thread to run is
not optimal. It can be optimized quite a lot.
[dt]OS-specific controls.
[dd]Currently, only common controls are supported in BIF/Window. In the
future interfaces to OS-specific controls will be made.
[edl]
[etopic]


[topic bifauthors upafter "The authors (and other related stuff ...)"]
[key "Contacting the authors"][key "Bug reports"]
BIF is made by:
[sl]
[li]Ivan Skytte Jõrgensen
[li]Bo Lorentsen
[esl]

[hp 2]Author background[ehp]

Ivan has just finished his second IT education at èrhus Kõbmandskole, Informatik
(AArhus Business College, IT), Denmark.  He writes in a compact and
incomprehensible style which makes him unique, so when you don't understand
some of the text you know who has written it :-) His interests are among others
cross-platform development.

Bo ... doesn't have any education, but have studied and practiced C/C++
programming for quite some time. He's the one trying to moderate Ivan 
when he is making to much code. His main interest is the base system,
and the OO design rules. If the code is full of comments and uses a more
consistent structure then its Bo's code. There isn't much of this kind of code
because Ivan is the drudge in the project, and Bo is only conducting the
battle.

[hp 2]Acknowledgments:[ehp]

The authors thank Carsten Mouritzen and Casper Pedersen for valuable
opinions during the design and implementation of BIF.  We also thank Morten
Baun, SysOp of 2:238/10, Peder Toftegaard Olsen, SysOp of 2:238/169,
Brian Vind, SysOp of 2:238/141 and Per Riber, SysOp of 2:238/59 who made a
whole conference just for BIF.


[hp 2]Contacting the authors[ehp]

If you have any questions or suggestions or have found any bugs please contact
us. 

Ivan Skytte Jõrgensen can be reached at:
[sl]
[li]FidoNet: 2:238/64.17 or 2:238/59.23
[li]SnailMail:
[sl]
[li]Ivan Skytte Jõrgensen
[li]Vestergade 9
[li]8732  HovedgÜrd
[li]Denmark
[esl]
[esl]

Bo Lorentsen can be reached at:
[sl]
[li]FidoNet: 2:238/59.22
[li]SnailMail:
[sl]
[li]Bo Lorentsen
[li]íblehaven 3
[li]8543  Hornslet
[li]Denmark
[esl]
[esl]
[etopic]
