#ifndef __BIFIMEX_W16_INCLUDED
#define __BIFIMEX_W16_INCLUDED

//BIFCLASS and BIFFUNCTION #defines for Windows 3.x 16-bit

//Defines BIFCLASS and BIFFUNCTION modifiers taking into account what compiler
//is used, wether BIF is in a DLL, and if we are building the BIF library


//First check that user has defined the library determination macro
#if (!defined(BIF_IN_SLL)) && (!defined(BIF_IN_DLL))
// Default is static link library
#  define BIF_IN_SLL
#endif
//... and that he has not defined both
#if defined(BIF_IN_SLL) && defined(BIF_IN_DLL)
#  error You cannot define both BIF_IN_SLL and BIF_IN_DLL
#endif


#if defined(__WATCOMC__)
//Watcom C/C++
#if defined(BIF_IN_SLL)
//BIF is in a static library (.LIB) - modifiers are not needed
#  define BIFCLASS
#  define BIFFUNCTION
#else
//BIF is in a dynlink library (.DLL). We cannot use Watcoms default calling
//convention because exported functions zap AX.
#  ifdef BUILDING_BIF
#    define BIFCLASS __far __cdecl __export
#    define BIFFUNCTION __far __cdecl __export
#  else
#    define BIFCLASS __far __cdecl
#    define BIFFUNCTION __far __cdecl
#  endif
#endif


#elif defined(__BORLANDC__)
//Borland C++
#if defined(BIF_IN_SLL)
//BIF is in a static library (.LIB) - modifiers are not needed
#  define BIFCLASS
#  define BIFFUNCTION
#else
//BIF is in a dynlink library (.DLL)
#  ifdef BUILDING_BIF
#    define BIFCLASS __export
#    define BIFFUNCTION __export
#  else
//   The method of using classes in DLL changed from 3.1 to 4.0
#    if BORLANDC <= 0x410
#      define BIFCLASS __huge
#    else
#      define BIFCLASS __import
#    endif
#    define BIFFUNCTION __far
#  endif
#endif


#elif defined(__SC__)
//Symantec C++
#if defined(BIF_IN_SLL)
//BIF is in a static library (.LIB) - modifiers are not needed
#  define BIFCLASS
#  define BIFFUNCTION
#else
//BIF is in a dynlink library (.DLL) 
#  ifdef BUILDING_BIF
#    define BIFCLASS __far __export
#    define BIFFUNCTION __far __export
#  else
#    define BIFCLASS __far
#    define BIFFUNCTION __far
#  endif
#endif


#else
//add a section for your compiler (Visual C++, Microsoft, ...)
#error Unknown compiler. Modify this header to support it.
#endif

#endif /*__BIFIMEX_W16_INCLUDED*/

